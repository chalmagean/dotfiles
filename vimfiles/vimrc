set runtimepath^=~/.vim runtimepath+=~/.vim/after
let &packpath=&runtimepath

" Leader
" let mapleader = "\<Space>"

" Softtabs, 2 spaces
set tabstop=2
set shiftwidth=2
set shiftround
set expandtab

" Show the filename in iTerm
set title

set splitright

set visualbell
set linebreak     " Break lines without breaking words
set wrap
set exrc
set secure
set backspace=2   " Backspace deletes like most programs in insert mode

" but do not persist backup after successful write
set nobackup
set nowritebackup

" Better display for messages
set cmdheight=2

" You will have bad experience for diagnostic messages when it's default 4000.
" set updatetime=300

" use rename-and-write-new method whenever safe
set backupcopy=auto

" patch required to honor double slash at end
if has("patch-8.1.0251")
	" consolidate the writebackups -- not a big
	" deal either way, since they usually get deleted
	set backupdir^=~/.vim/backup//
end

" Protect changes between writes. Default values of
" updatecount (200 keystrokes) and updatetime
" (4 seconds) are fine
set swapfile
set directory^=~/.vim/swap//

set history=50
set mouse=a       " enable the use of the mouse
set ruler         " show the cursor position all the time
set showcmd       " display incomplete commands
set incsearch     " do incremental searching
set laststatus=2  " Always display the status line
set sidescroll=1
set statusline=
set statusline+=%-6.3n\                      " buffer number
set statusline+=%f\                          " filename
set statusline+=%h%m%r%w                     " status flags
set statusline+=\[%{strlen(&ft)?&ft:'none'}] " file type
set statusline+=%=                           " right align remainder
" set statusline+=0x%-8B                     " character value
set statusline+=%-14(%l,%c%V%)               " line, character
set statusline+=%<%P                         " file position
set autowrite                                " Automatically :write before
                                             " running commands
set ignorecase
set infercase
set smartcase
set foldmethod=indent   
set foldnestmax=10
set nofoldenable
set foldlevel=2
set hidden
set nrformats=hex                            " Don't increment octals numbers

set formatoptions=crql                       " Removed `o` from the default
                                             " `croql` to prevent adding a 
                                             " comment delimiter when you 
                                             " press o/O
set formatoptions+=j " delete comment character when joining commented lines

" Make ESC respond faster
set timeoutlen=1000
set ttimeoutlen=0


" When switching buffers, focus the buffer if already open in a different tab
set switchbuf=usetab

set wildignorecase
set wildignore+=tags,*.jpg,*.ico,*.png,*.gif,*.svg,.DS_Store,node_modules/,elm-stuff/,.git/
set wildmode=longest:full,list:full

set lazyredraw

set nocursorcolumn
set nocursorline
set norelativenumber
set nonumber
set numberwidth=5

" Move backup files away from the current folder
set backupdir=~/tmp
set dir=~/tmp

if exists('+undofile')
  set undofile
  set undodir=~/.vim/undodir
  set undolevels=1000 " maximum number of changes that can be undone
  set undoreload=10000 " maximum number lines to save for undo on a buffer reload
endif

set grepprg=ag\ --nogroup\ --nocolor\ --ignore-case\ --column\ --vimgrep
set grepformat=%f:%l:%c:%m,%f:%l:%m

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

" Load matchit.vim, but only if the user hasn't installed a newer version.
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif

filetype plugin indent on

" Highlight current line on the active window only
augroup BgHighlight
  autocmd!
  autocmd WinEnter * set cul
  autocmd WinLeave * set nocul
augroup END

cnoreabbrev W w
cnoreabbrev Q q

if has('nvim')
  set inccommand=nosplit
endif

augroup vimrcEx
  autocmd!

  if has('nvim')
    autocmd TermOpen * setlocal statusline=%{b:term_title}
  endif
  " When editing a file, always jump to the last known cursor position.
  " Don't do it for commit messages, when the position is invalid, or when
  " inside an event handler (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  " Automatically wrap at 72 characters and spell check git commit messages
  autocmd FileType gitcommit setlocal textwidth=72
  autocmd FileType gitcommit setlocal spell
  " Remove _ from the keywords list so it doesn't autocomplete the branch names
  autocmd FileType gitcommit setlocal iskeyword=@,48-57,192-255

  " Allow css and html/slim files to autocomplete hyphenated words
  autocmd FileType ruby,css,scss,sass,slim,html setlocal iskeyword+=-

  " Insert the pipe |> with <C-l>
  autocmd FileType elixir inoremap <C-l> \|> 

  autocmd FileType ruby,elixir,eelixir,cucumber setlocal number
  autocmd FileType ruby,javascript setlocal colorcolumn=80

  autocmd FileType liquid setlocal iskeyword+=-

  autocmd FileType elm setl nocursorbind

  autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab indentkeys-=0# indentkeys-=<:> foldmethod=indent nofoldenable
augroup END

augroup VIMRC
  autocmd!

  " autocmd BufLeave *.css normal! mS
  " autocmd BufLeave *.scss normal! mS
  " autocmd BufLeave *.sass normal! mS

  autocmd BufLeave *.html normal! mH
  autocmd BufLeave *.erb normal! mH
  autocmd BufLeave *.slim normal! mH

  autocmd BufLeave *.js normal! mJ
  autocmd BufLeave *.coffee normal! mJ

  autocmd BufLeave *.elm normal! mE

  autocmd BufLeave *_controller.rb normal! mC
  autocmd BufLeave models/*.rb normal! mM
  autocmd BufLeave views/**/*.rb normal! mV
  autocmd BufLeave *_spec.rb normal! mS
augroup END

set scrolloff=3 " Keep 3 lines below and above the cursor

if has("termguicolors")
  set termguicolors
endif

if has("virtualedit")
  " Allow cursor to move where there is no text in visual block mode
  set virtualedit=block
endif

" don't scroll windows together
set nocursorbind
set noscrollbind

" Display extra whitespace
set list listchars=tab:»·,trail:.,nbsp:·

set showtabline=1

set textwidth=0

" ruby path if you are using RVM
let g:ruby_path = system('rvm current')
" Intent private methods
let g:ruby_indent_access_modifier_style = 'outdent'

set hlsearch

" Directory list style
let g:netrw_banner = 0
let g:netrw_preview = 1
let g:netrw_hide = 1
let g:netrw_altv = 1
let g:netrw_browse_split = 0
" autocmd FileType netrw setl bufhidden=wipe

" Treat <li> and <p> tags like the block tags they are
" let g:html_indent_tags = 'li\|p'

" Remove slipt separator vertical bar
" set fillchars=fold:-

" Set spellfile to location that is guaranteed to exist, can be symlinked to
" Dropbox or kept in Git and managed outside of thoughtbot/dotfiles using rcm.
set spellfile=$HOME/.vim-spell-en.utf-8.add

" Use UTF-8 without BOM
set encoding=utf-8 nobomb

set complete=.,w,b

" Always use vertical diffs
set diffopt+=vertical

" Use only 1 space after "." when joining lines instead of 2
set nojoinspaces

" Don't reset cursor to start of line when moving around
set nostartofline

"" Autocomplete ids and classes in CSS
autocmd FileType css,scss set iskeyword=@,48-57,_,-,?,!,192-255
"" Add the '-' as a keyword in erb files
autocmd FileType eruby set iskeyword=@,48-57,_,192-255,$,-
" Disable cursorline in ruby files. It makes scrolling much faster.
au BufNewFile,BufRead,BufEnter *.rb set nocursorline

" Auto save contents of a buffer when you lose focus
autocmd BufLeave,FocusLost * silent! update

" Based on a range, it replace `:my_key => "value"` to `my_key: value`
command! -range OldToNewHash <line1>,<line2>s/:\([a-zA-Z-0-9_]\+\)\s*=>/\1:/g

" Update the bult-in CSS complete function to latest CSS standard
autocmd FileType css set omnifunc=csscomplete#CompleteCSS noci
autocmd Filetype vimfiler setlocal nocursorline

autocmd BufEnter *.{js,jsx,ts,tsx} :syntax sync fromstart
autocmd BufLeave *.{js,jsx,ts,tsx} :syntax sync clear

let g:coc_global_extensions = [
  \ 'coc-tsserver'
  \ ]
if isdirectory('./node_modules') && isdirectory('./node_modules/prettier')
  let g:coc_global_extensions += ['coc-prettier']
endif

if isdirectory('./node_modules') && isdirectory('./node_modules/eslint')
  let g:coc_global_extensions += ['coc-eslint']
endif

" Find where a partial is called
" With no arguments it uses the current file name to do the search.
" You can also pass a string to search for and it will do a search for
" a line matching render.*<your_string>
function! GrepPartial(...)
  if a:0
    let pattern = "render.*" . a:0
  else
    let filename = substitute(expand("%:t:r:r"), "^_", "", "")
    let pattern = "render.*" . filename
  endif

  execute "grep! -Re '" . pattern . "' app/views/"
endfunction
command! -nargs=? GrepPartial call GrepPartial(<args>)

let g:python3_host_prog = '/usr/local/bin/python3'

" Add a space after : and ,
" :%s/[:,]\ze[^ ]/& /g

" Replace multiple spaces before the = sign with one space
" Turns this:
"   foo     = bar
" into this:
"   foo = bar
" s/\(^\s\+[a-z.]\+\)\(\s\+\)/\1 /

" 0: Strict, consider non-blank characters before and after the tags.
" 1: Flexible, ignore non-blank characters before and after the tags.
let g:innerMultilineHTMLTagMode = 0

" https://vi.stackexchange.com/questions/13050/how-can-i-shift-only-inner-contents-of-html-element?newsletter=1&nlcode=592797%7c71ea
function! InnerMultilineHTMLTag()
   " Get the position of the first line of the last selected Visual area.
   let openingMark =  getpos("'<")

   " Get the position of the last line of the last selected Visual area.
   let closingMark = getpos("'>")

   " Check whether both marks are on the same line.
   if openingMark[1] != closingMark[1] 

      " Get the lines where the marks are on.
      let openingLine = getline(openingMark[1])
      let closingLine = getline(closingMark[1])

      " Check whether there's nothing appended to the opening tag.
      if g:innerMultilineHTMLTagMode == 1  ||
         \ match( openingLine, '\S',  openingMark[2] - 1) == -1 

         " Check whether the closing tag is at the beginning of the line.
         if match( closingLine, "$" ) + 1  ==  closingMark[2]
            " Restore and adjust the last Visual area.
            normal! gvVojo
            return

         " Check whether there's nothing prepended to the closing tag.
         elseif g:innerMultilineHTMLTagMode == 1  || 
            \   match( closingLine, '\S\%<' . closingMark[2] . "c" ) == -1
            " Restore and adjust the last Visual area.
            normal! gvVkojo
            return
         endif
      endif 
   endif

   " Do nothing. Restore the last Visual area.
   normal! gv
endfunction

function! ToggleInnerMultilineHTMLTagMode()
   if g:innerMultilineHTMLTagMode == 0 
      let g:innerMultilineHTMLTagMode = 1 
      echo "it text object is now flexible"
   else
      let g:innerMultilineHTMLTagMode = 0 
      echo "it text object is now strict"
   endif
endfunction

" Map to set the multi-line HTML tag mode.
" nnoremap - :call ToggleInnerMultilineHTMLTagMode()<CR>

" Map to extend the behavior of the 'it' text object to create linewise
" visual areas within multi-line HTML tags.
" See https://vi.stackexchange.com/q/13050/6698
vnoremap it it:<C-U>call InnerMultilineHTMLTag()<CR>
omap it :normal vit<CR>

" Remove diacritical signs from characters in specified range of lines.
" Examples of characters replaced: á -> a, ç -> c, Á -> A, Ç -> C.
" Uses substitute so changes can be confirmed.
function! s:RemoveDiacritics(line1, line2)
  let diacs = 'áâãàăâçéêíîóôõüúșț'  " lowercase diacritical signs
  let repls = 'aaaaaaceeiiooouust'  " corresponding replacements
  let diacs .= toupper(diacs)
  let repls .= toupper(repls)
  let diaclist = split(diacs, '\zs')
  let repllist = split(repls, '\zs')
  let trans = {}

  for i in range(len(diaclist))
    let trans[diaclist[i]] = repllist[i]
  endfor

  execute a:line1 . ',' . a:line2 . 's/[' . diacs . ']/\=trans[submatch(0)]/gIce'
endfunction

command! RemoveDiacritics call s:RemoveDiacritics(<line1>, <line2>)

command! FormatJSON %!jq

""" PLUGINS

if &compatible
  set nocompatible
end

call plug#begin('~/.vim/bundle')

Plug 'junegunn/vim-easy-align'

" Ruby/Rails
" Make sure you have gem-ctags & gem-browse installed
Plug 'tpope/vim-rails'
Plug 'tpope/vim-ragtag'
Plug 'tpope/vim-projectionist'
Plug 'tpope/vim-rake'
Plug 'tpope/vim-bundler'
Plug 'tpope/vim-cucumber'
Plug 'tpope/vim-abolish' " Smart-case substitutions
Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-endwise'
Plug 'stephpy/vim-yaml'
Plug 'rainerborene/vim-reek'
Plug 'zackhsi/sorbet.vim'
Plug 'jgdavey/vim-blockle'
Plug 'ecomba/vim-ruby-refactoring'
Plug 'henrik/vim-ruby-runner'

Plug 'mattn/emmet-vim'

" Toggle various settings on/off
Plug 'tpope/vim-unimpaired'

" Surround words
Plug 'tpope/vim-surround'

" Comments
Plug 'tpope/vim-commentary'

" Syntactic sugar for UNIX commands
Plug 'tpope/vim-eunuch'

" Automatically create any non-existent directories before writing the buffer.
Plug 'pbrisbin/vim-mkdir'

" Ack support
Plug 'mileszs/ack.vim'

" Exchange words
Plug 'tommcdo/vim-exchange'

" Testing (multiple languages)
Plug 'janko-m/vim-test'

" Adds repeat for plugins
Plug 'tpope/vim-repeat'

" Ligh status line
Plug 'itchyny/lightline.vim'

" Reuse the same terminal
" Plug 'kassio/neoterm'
Plug 'voldikss/vim-floaterm'

" Intellisence / LSP
" Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Project navigation
Plug 'tpope/vim-vinegar'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'zackhsi/fzf-tags'

" Git
Plug 'tpope/vim-fugitive'
Plug 'samoshkin/vim-mergetool'

" Javascript
Plug 'pangloss/vim-javascript'
Plug 'leafgarland/typescript-vim'
Plug 'MaxMEllon/vim-jsx-pretty'
Plug 'peitalin/vim-jsx-typescript'
Plug 'styled-components/vim-styled-components', { 'branch': 'main' }
Plug 'isRuslan/vim-es6'
Plug 'leshill/vim-json'

" GraphQL
Plug 'jparise/vim-graphql'

Plug 'rickhowe/spotdiff.vim'
Plug 'rickhowe/diffchar.vim'

" Elm
Plug 'antew/vim-elm-analyse'
Plug 'andys8/vim-elm-syntax'

" Jekyll
Plug 'tpope/vim-liquid'

" Elixir
" Plug 'awetzel/elixir.nvim', { 'do': 'yes \| ./install.sh' }
" Plug 'elixir-lang/vim-elixir'
" Plug 'mhinz/vim-mix-format'

" Handles bracketed-paste-mode in vim (aka. automatic `:set paste`)
Plug 'ConradIrwin/vim-bracketed-paste'

" Haskell
Plug 'neovimhaskell/haskell-vim'

Plug 'rust-lang/rust.vim'

" Themes
Plug 'rakr/vim-one'
Plug 'connorholyday/vim-snazzy'

" Required libraries
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'tomtom/tlib_vim'

if filereadable(expand("~/.vimrc.bundles.local"))
  source ~/.vimrc.bundles.local
endif

call plug#end()

let g:rustfmt_autosave = 1

let g:ruby_refactoring_map_keys=0

let ruby_fold = 1
let ruby_operators = 1
let ruby_pseudo_operators = 1
let ruby_foldable_groups = 'def do'
let ruby_spellcheck_strings = 1

let g:reek_always_show = 0
let g:reek_on_loading = 0

" Set completeopt to have a better completion experience
set completeopt=menuone,noinsert,noselect

let g:mergetool_layout = 'mr'
let g:mergetool_prefer_revision = 'local'

set background=dark
colorscheme one
hi DiffLine guibg=#282c34 ctermbg=16
hi DiffFile guibg=#282c34 ctermbg=16
hi DiffNewFile guibg=#282c34 ctermbg=16
hi DiffAdded guibg=#282c34 ctermbg=16
hi DiffRemoved guibg=#282c34 ctermbg=16
hi DiffChanged guibg=#282c34 ctermbg=16

let g:airline_theme='one'
" Set a less contrasting fold color for the one (dark) theme
highlight Folded ctermbg=none ctermfg=16 guibg=none guifg=#828997

highlight Sig               cterm=italic ctermfg=1 ctermbg=11 guifg=#535353
highlight SigBlockDelimiter cterm=italic ctermfg=9 ctermbg=11 guifg=#535353

let g:floaterm_width = 0.9
let g:floaterm_height = 0.9
let g:floaterm_keymap_toggle = '<leader>t'

let g:lightline = {
      \ 'colorscheme': 'seoul256',
      \ }

let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

" Terminal color definitions (24 bits)
let g:terminal_color_0="#1b2b34"
let g:terminal_color_1="#ed5f67"
let g:terminal_color_2="#9ac895"
let g:terminal_color_3="#fbc963"
let g:terminal_color_4="#669acd"
let g:terminal_color_5="#c695c6"
let g:terminal_color_6="#5fb4b4"
let g:terminal_color_7="#c1c6cf"
let g:terminal_color_8="#65737e"
let g:terminal_color_9="#fa9257"
let g:terminal_color_10="#343d46"
let g:terminal_color_11="#4f5b66"
let g:terminal_color_12="#a8aebb"
let g:terminal_color_13="#ced4df"
let g:terminal_color_14="#ac7967"
let g:terminal_color_15="#d9dfea"
let g:terminal_color_background="#1b2b34"
let g:terminal_color_foreground="#c1c6cf"

let g:LanguageClient_serverCommands = {
  \ 'elm': ['elm-language-server', '--stdio'],
  \ }

" let g:mix_format_on_save = 1
" let g:mix_format_silent_errors = 1

au FileType markdown vmap <Leader><Bslash> :EasyAlign*<Bar><Enter>
au FileType cucumber vmap <Leader><Bslash> :EasyAlign*<Bar><Enter>

let g:haskellmode_completion_ghc = 1
autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc

let test#strategy = "neovim"

let g:coc_explorer_global_presets = {
\   'floating': {
\      'position': 'floating',
\   },
\   'floatingLeftside': {
\      'position': 'floating',
\      'floating-position': 'left-center',
\      'floating-width': 50,
\   },
\   'floatingRightside': {
\      'position': 'floating',
\      'floating-position': 'left-center',
\      'floating-width': 50,
\   },
\   'simplify': {
\     'file.child.template': '[selection | clip | 1] [indent][icon | 1] [filename omitCenter 1]'
\   }
\ }

" let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6, 'highlight': 'Comment' } }
let g:fzf_layout = { 'down': '~40%' }
let g:fzf_buffers_jump = 0
let g:fzf_tags_command = 'ctags -R --languages=ruby --exclude=.git --exclude=log . $(bundle list --paths)'
" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

let g:elm_format_autosave = 1
let g:elm_setup_keybindings = 0
let g:elm_make_show_warnings = 1
let g:elm_detailed_complete = 1

let g:vim_json_syntax_conceal = 0

let g:ack_default_options = " -s -H --nocolor --nogroup --column --smart-case --follow"
" Use the silver searcher as Ack
let g:ackprg = 'ag --nogroup --nocolor --column'
" Change cursor shape between insert and normal mode in iTerm2.app
if $TERM_PROGRAM =~ "iTerm"
  let &t_SI = "\<Esc>]50;CursorShape=1\x7" " Vertical bar in insert mode
  let &t_EI = "\<Esc>]50;CursorShape=0\x7" " Block in normal mode
endif

let g:ragtag_global_maps = 1

let g:rails_projections = {
      \ "config/projections.json": {
      \   "command": "projections"
      \ }}

function! SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

let g:RubyRunner_open_below = 1
let g:RubyRunner_window_size = 20

